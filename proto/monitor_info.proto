syntax = "proto3";
package monitor.proto;

import "google/protobuf/empty.proto";
import "net_info.proto";
import "mem_info.proto";
import "cpu_stat.proto";
import "cpu_softirq.proto";
import "cpu_load.proto";

// 定义MonitorInfo消息类型
message MonitorInfo{
  string name = 1;
  // 可重复类型
  repeated SoftIrq soft_irq = 4;
  CpuLoad cpu_load = 5;
  repeated CpuStat cpu_stat = 6;
  MemInfo mem_info = 7;
  repeated NetInfo net_info = 8;
}

// gRPC与Protobuff完美结合的体现，代码整合
// 定义gRPC服务的接口
service GrpcManager {
  // 收集本地的状态信息，封装到MonitorInfo，让服务器将这些信息保存起来
  // MonitorInfo作为输入(请求)，google.protobuf.Empty表示此方法不需要返回值(响应)
  // 服务端收到这个请求后，会将这些信息保存起来，并返回一个空的消息表示操作成功。
  rpc SetMonitorInfo(MonitorInfo) returns (google.protobuf.Empty) {
  }

  // 向服务端请求数据（不需要传入数据），获取服务端当前的状态信息
  // 服务端收到这个请求后，会从存储中读取监控器的当前信息，
  // 并将其封装成一个 MonitorInfo 结构返回给客户端
  rpc GetMonitorInfo(google.protobuf.Empty) returns (MonitorInfo) {
  }
}
